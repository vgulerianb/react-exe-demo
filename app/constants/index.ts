const SAMPLE_CODE =
  "import { useState, useCallback, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ntype Player = 'X' | 'O';\ntype BoardState = (Player | null)[];\ntype WinningLine = number[] | null;\n\nconst WINNING_COMBINATIONS = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows\n    [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns\n    [0, 4, 8], [2, 4, 6] // Diagonals\n];\n\nconst TicTacToe = () => {\n    const [board, setBoard] = useState<BoardState>(Array(9).fill(null));\n    const [currentPlayer, setCurrentPlayer] = useState<Player>('X');\n    const [winningLine, setWinningLine] = useState<WinningLine>(null);\n    const [gameStatus, setGameStatus] = useState<'playing' | 'won' | 'draw'>('playing');\n    const [scores, setScores] = useState({ X: 0, O: 0 });\n\n    const checkWinner = useCallback((boardState: BoardState): WinningLine => {\n        for (const combination of WINNING_COMBINATIONS) {\n            const [a, b, c] = combination;\n            if (\n                boardState[a] &&\n                boardState[a] === boardState[b] &&\n                boardState[a] === boardState[c]\n            ) {\n                return combination;\n            }\n        }\n        return null;\n    }, []);\n\n    const handleClick = (index: number) => {\n        if (board[index] || gameStatus !== 'playing') return;\n\n        const newBoard = [...board];\n        newBoard[index] = currentPlayer;\n        setBoard(newBoard);\n\n        const winner = checkWinner(newBoard);\n        if (winner) {\n            setWinningLine(winner);\n            setGameStatus('won');\n            setScores(prev => ({\n                ...prev,\n                [currentPlayer]: prev[currentPlayer] + 1\n            }));\n        } else if (!newBoard.includes(null)) {\n            setGameStatus('draw');\n        } else {\n            setCurrentPlayer(currentPlayer === 'X' ? 'O' : 'X');\n        }\n    };\n\n    const resetGame = () => {\n        setBoard(Array(9).fill(null));\n        setCurrentPlayer('X');\n        setWinningLine(null);\n        setGameStatus('playing');\n    };\n\n    const getGameMessage = () => {\n        switch (gameStatus) {\n            case 'won':\n                return `Player ${currentPlayer} wins!`;\n            case 'draw':\n                return \"It's a draw!\";\n            default:\n                return `Player ${currentPlayer}'s turn`;\n        }\n    };\n\n    const getCellColor = (value: Player | null) => {\n        if (!value) return 'text-gray-400';\n        return value === 'X' ? 'text-emerald-400' : 'text-pink-400';\n    };\n\n    return (\n        <div className=\"min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 flex flex-col items-center justify-center p-4\">\n            <h1 className=\"text-4xl font-bold text-white mb-8 text-center\">\n                Tic Tac Toe\n            </h1>\n            \n            <div className=\"flex gap-8 mb-6 text-white\">\n                <div className=\"text-emerald-400\">\n                    Player X: {scores.X}\n                </div>\n                <div className=\"text-pink-400\">\n                    Player O: {scores.O}\n                </div>\n            </div>\n\n            <motion.div\n                className=\"text-xl text-white mb-6\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                key={getGameMessage()}\n            >\n                {getGameMessage()}\n            </motion.div>\n\n            <div className=\"grid grid-cols-3 gap-3 bg-gray-800/50 p-4 rounded-xl shadow-lg\">\n                {board.map((cell, index) => (\n                    <motion.button\n                        key={index}\n                        className={`w-24 h-24 bg-gray-700/50 rounded-lg text-4xl font-bold flex items-center justify-center\n                            ${winningLine?.includes(index) ? 'bg-gray-600/50' : ''}\n                            hover:bg-gray-600/50 transition-colors`}\n                        onClick={() => handleClick(index)}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                    >\n                        <AnimatePresence mode=\"wait\">\n                            {cell && (\n                                <motion.span\n                                    key={cell}\n                                    className={getCellColor(cell)}\n                                    initial={{ scale: 0, opacity: 0 }}\n                                    animate={{ scale: 1, opacity: 1 }}\n                                    exit={{ scale: 0, opacity: 0 }}\n                                >\n                                    {cell}\n                                </motion.span>\n                            )}\n                        </AnimatePresence>\n                    </motion.button>\n                ))}\n            </div>\n\n            <motion.button\n                className=\"mt-8 px-6 py-3 bg-gray-700/50 text-white rounded-full text-lg\n                    hover:bg-gray-600/50 transition-colors\"\n                onClick={resetGame}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n            >\n                New Game\n            </motion.button>\n        </div>\n    );\n};\n\nexport default TicTacToe;\n";

export { SAMPLE_CODE };
