const SAMPLE_CODE =
  "import { motion } from 'framer-motion';\nimport { useState } from 'react';\n\ntype Player = 'X' | 'O' | null;\ntype GameStatus = 'playing' | 'won' | 'draw';\ntype Board = Player[];\n\ninterface SquareProps {\n  value: Player;\n  onClick: () => void;\n  isWinning: boolean;\n  index: number;\n}\n\nconst Square: React.FC<SquareProps> = ({ value, onClick, isWinning, index }) => (\n  <motion.button\n    key={index}\n    whileHover={{ scale: 0.95 }}\n    whileTap={{ scale: 0.9 }}\n    className={`h-24 rounded-lg text-4xl font-bold flex items-center justify-center\n      ${isWinning ? 'bg-green-100' : 'bg-gray-50'}\n      ${value ? 'cursor-not-allowed' : 'cursor-pointer hover:bg-gray-100'}\n      transition-colors duration-200`}\n    onClick={onClick}\n    aria-label={value ? `Square ${index + 1} with ${value}` : `Empty square ${index + 1}`}\n  >\n    {value && (\n      <motion.span\n        initial={{ scale: 0 }}\n        animate={{ scale: 1 }}\n        className={value === 'X' ? 'text-blue-500' : 'text-rose-500'}\n      >\n        {value}\n      </motion.span>\n    )}\n  </motion.button>\n);\n\ninterface StatusMessageProps {\n  gameStatus: GameStatus;\n  isXNext: boolean;\n}\n\nconst StatusMessage: React.FC<StatusMessageProps> = ({ gameStatus, isXNext }) => {\n  if (gameStatus === 'playing') {\n    return (\n      <p className=\"text-lg text-gray-700\">\n        Next player: <span className=\"font-bold\">{isXNext ? 'X' : 'O'}</span>\n      </p>\n    );\n  }\n  if (gameStatus === 'won') {\n    return (\n      <p className=\"text-lg text-green-600 font-bold\">\n        Player {isXNext ? 'O' : 'X'} wins!\n      </p>\n    );\n  }\n  return (\n    <p className=\"text-lg text-gray-600 font-bold\">\n      It's a draw!\n    </p>\n  );\n};\n\nconst TicTacToe: React.FC = () => {\n  const [board, setBoard] = useState<Board>(Array(9).fill(null));\n  const [isXNext, setIsXNext] = useState<boolean>(true);\n  const [gameStatus, setGameStatus] = useState<GameStatus>('playing');\n  const [winningCombination, setWinningCombination] = useState<number[]>([]);\n\n  const winningPatterns: number[][] = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows\n    [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns\n    [0, 4, 8], [2, 4, 6] // Diagonals\n  ];\n\n  const checkWinner = (squares: Board): Player => {\n    for (const [a, b, c] of winningPatterns) {\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        setWinningCombination([a, b, c]);\n        return squares[a];\n      }\n    }\n    return null;\n  };\n\n  const handleClick = (index: number): void => {\n    if (board[index] || gameStatus !== 'playing') return;\n\n    const newBoard = [...board];\n    newBoard[index] = isXNext ? 'X' : 'O';\n    setBoard(newBoard);\n\n    const winner = checkWinner(newBoard);\n    if (winner) {\n      setGameStatus('won');\n    } else if (!newBoard.includes(null)) {\n      setGameStatus('draw');\n    }\n\n    setIsXNext(!isXNext);\n  };\n\n  const resetGame = (): void => {\n    setBoard(Array(9).fill(null));\n    setIsXNext(true);\n    setGameStatus('playing');\n    setWinningCombination([]);\n  };\n\n  return (\n    <div className=\"bg-gray-50 flex flex-col items-center justify-center p-4\">\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-white rounded-xl shadow-lg p-6 max-w-md w-full\"\n      >\n        <h1 className=\"text-3xl font-bold text-gray-800 text-center mb-6\">\n          Tic Tac Toe\n        </h1>\n\n        <div className=\"grid grid-cols-3 gap-3 mb-6\">\n          {board.map((value, index) => (\n            <Square\n              key={index}\n              value={value}\n              onClick={() => handleClick(index)}\n              isWinning={winningCombination.includes(index)}\n              index={index}\n            />\n          ))}\n        </div>\n\n        <div className=\"text-center mb-4\">\n          <StatusMessage gameStatus={gameStatus} isXNext={isXNext} />\n        </div>\n\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          className=\"w-full py-3 rounded-lg bg-blue-500 text-white font-semibold\n            hover:bg-blue-600 transition-colors duration-200\"\n          onClick={resetGame}\n          aria-label=\"Start new game\"\n        >\n          New Game\n        </motion.button>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default TicTacToe;\n";
export { SAMPLE_CODE };
